// Prisma Schema para Sistema de Inventario

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  SECRETARIA
}

enum MovementType {
  IN
  OUT
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  passwordHash  String    @map("password_hash")
  role          UserRole
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("users")
}

model Supplier {
  id          Int         @id @default(autoincrement())
  name        String
  balance     Decimal     @default(0) @db.Decimal(12, 2)
  phone       String?
  email       String?
  address     String?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  
  purchases   Purchase[]

  @@map("suppliers")
}

model Product {
  id            Int             @id @default(autoincrement())
  name          String
  stockKilos    Decimal         @default(0) @map("stock_kilos") @db.Decimal(10, 3)
  description   String?
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  
  purchaseItems PurchaseItem[]
  saleItems     SaleItem[]
  kardexEntries Kardex[]

  @@map("products")
}

model Purchase {
  id          Int             @id @default(autoincrement())
  supplierId  Int             @map("supplier_id")
  total       Decimal         @db.Decimal(12, 2)
  date        DateTime        @default(now())
  notes       String?
  createdAt   DateTime        @default(now()) @map("created_at")
  
  supplier    Supplier        @relation(fields: [supplierId], references: [id])
  items       PurchaseItem[]

  @@map("purchases")
}

model PurchaseItem {
  id          Int       @id @default(autoincrement())
  purchaseId  Int       @map("purchase_id")
  productId   Int       @map("product_id")
  kilos       Decimal   @db.Decimal(10, 3)
  unitPrice   Decimal   @map("unit_price") @db.Decimal(12, 2)
  subtotal    Decimal   @db.Decimal(12, 2)
  
  purchase    Purchase  @relation(fields: [purchaseId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])

  @@map("purchase_items")
}

model Sale {
  id          Int         @id @default(autoincrement())
  total       Decimal     @db.Decimal(12, 2)
  date        DateTime    @default(now())
  notes       String?
  createdAt   DateTime    @default(now()) @map("created_at")
  
  items       SaleItem[]

  @@map("sales")
}

model SaleItem {
  id          Int       @id @default(autoincrement())
  saleId      Int       @map("sale_id")
  productId   Int       @map("product_id")
  kilos       Decimal   @db.Decimal(10, 3)
  unitPrice   Decimal   @map("unit_price") @db.Decimal(12, 2)
  subtotal    Decimal   @db.Decimal(12, 2)
  
  sale        Sale      @relation(fields: [saleId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])

  @@map("sale_items")
}

model Kardex {
  id            Int           @id @default(autoincrement())
  productId     Int           @map("product_id")
  type          MovementType
  kilos         Decimal       @db.Decimal(10, 3)
  balanceAfter  Decimal       @map("balance_after") @db.Decimal(10, 3)
  date          DateTime      @default(now())
  reference     String?       // ID de compra o venta
  notes         String?
  
  product       Product       @relation(fields: [productId], references: [id])

  @@map("kardex")
}
